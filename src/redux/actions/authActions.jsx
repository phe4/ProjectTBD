import { createAsyncThunk } from "@reduxjs/toolkit";
import {
  getAuth,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut,
  signInWithPopup,
  GoogleAuthProvider,
} from "firebase/auth";
import { auth, db } from "../../utilities/firebase";
import { setUser } from "../slices/userSlice";
import { checkUserUpdateOrCreation } from "./userActions";

export const signInWithGoogle = createAsyncThunk(
  'auth/signInWithGoogle',
  async ({registrationToken}, thunkAPI) => {
    try{
      // TODO: add registration token validation
      // check if the token is generated by the admin and if it is not used
      console.log(registrationToken);
      if(registrationToken !== null && registrationToken !== undefined){
        const checkResult = false;
        if(!checkResult){
          alert("Invalid registration token");
          return thunkAPI.rejectWithValue("Invalid registration token");
        }
      }
      const provider = new GoogleAuthProvider();
      const result = await signInWithPopup(auth, provider);
      const token = result.user.accessToken;
      const user = {
        uid: result.user.uid,
        displayName: result.user.displayName,
        email: result.user.email,
        photoURL: result.user.photoURL,
        // role: registrationToken? "instructor" : "student",
      };
      // thunkAPI.dispatch(setUser(user));
      thunkAPI.dispatch(checkUserUpdateOrCreation(user));
      return { user, token };
    } catch (error) {
      console.log(error);
      return thunkAPI.rejectWithValue(error.message);
    }
  }
);

export const setAuth = createAsyncThunk(
  'auth/setAuth',
  async (user, thunkAPI) => {
    try{
      const res = await thunkAPI.dispatch(checkUserUpdateOrCreation(user));
      return res.payload;
    } catch (error) {
      console.log(error);
      return thunkAPI.rejectWithValue(error.message);
    }
  }
);